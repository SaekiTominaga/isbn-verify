{"version":3,"sources":["ISBN.esm.js"],"names":["_isbn","_isbn13","_isbn10","__classPrivateFieldSet","this","receiver","privateMap","value","has","TypeError","set","__classPrivateFieldGet","get","[object Object]","isbn","strict","length","test","verifyCheckDigit","isbnNoHyphens","_getNoHyphens","substring","_getCheckDigit13","_getCheckDigit10","replace","checkDigit","String","Number","WeakMap"],"mappings":"AAAA,IAaIA,EAAOC,EAASC,EAbhBC,EAA0BC,MAAQA,KAAKD,wBAA2B,SAAUE,EAAUC,EAAYC,GAClG,IAAKD,EAAWE,IAAIH,GAChB,MAAM,IAAII,UAAU,kDAGxB,OADAH,EAAWI,IAAIL,EAAUE,GAClBA,GAEPI,EAA0BP,MAAQA,KAAKO,wBAA2B,SAAUN,EAAUC,GACtF,IAAKA,EAAWE,IAAIH,GAChB,MAAM,IAAII,UAAU,kDAExB,OAAOH,EAAWM,IAAIP,mBAQX,MAKXQ,YAAYC,EAAMC,GAAS,GACvBf,EAAMU,IAAIN,UAAM,GAChBH,EAAQS,IAAIN,MAAM,GAClBF,EAAQQ,IAAIN,MAAM,GAClBD,EAAuBC,KAAMJ,EAAOc,GACpC,MAAME,EAASF,EAAKE,OACL,KAAXA,GAAiB,yCAAyCC,KAAKH,GAC/DX,EAAuBC,KAAMH,GAAS,GAEjC,WAAWgB,KAAKH,GACrBX,EAAuBC,KAAMH,GAAUc,GAEvB,KAAXC,GAAiB,kCAAkCC,KAAKH,GAC7DX,EAAuBC,KAAMF,GAAS,GAEjC,eAAee,KAAKH,IACzBX,EAAuBC,KAAMF,GAAUa,GAQ/CF,UACI,OAAOT,KAAKc,mBAOhBL,WACI,OAAOF,EAAuBP,KAAMH,GAOxCY,WACI,OAAOF,EAAuBP,KAAMF,GAOxCW,eACI,OAAOF,EAAuBP,KAAMH,IAAYU,EAAuBP,KAAMF,GAOjFW,mBACI,GAAIF,EAAuBP,KAAMH,GAAU,CAEvC,MAAMkB,EAAgBf,KAAKgB,gBAC3B,OAAOD,EAAcE,UAAU,MAAQjB,KAAKkB,iBAAiBH,GAE5D,GAAIR,EAAuBP,KAAMF,GAAU,CAE5C,MAAMiB,EAAgBf,KAAKgB,gBAC3B,OAAOD,EAAcE,UAAU,KAAOjB,KAAKmB,iBAAiBJ,GAEhE,OAAO,EAOXN,gBACI,OAAOF,EAAuBP,KAAMJ,GAAOwB,QAAQ,KAAM,IAS7DX,iBAAiBM,GACb,MAAMM,EAAaC,OAAO,IACpBC,OAAOR,EAAcE,UAAU,EAAG,IACQ,EAAxCM,OAAOR,EAAcE,UAAU,EAAG,IAClCM,OAAOR,EAAcE,UAAU,EAAG,IACM,EAAxCM,OAAOR,EAAcE,UAAU,EAAG,IAClCM,OAAOR,EAAcE,UAAU,EAAG,IACM,EAAxCM,OAAOR,EAAcE,UAAU,EAAG,IAClCM,OAAOR,EAAcE,UAAU,EAAG,IACM,EAAxCM,OAAOR,EAAcE,UAAU,EAAG,IAClCM,OAAOR,EAAcE,UAAU,EAAG,IACO,EAAzCM,OAAOR,EAAcE,UAAU,EAAG,KAClCM,OAAOR,EAAcE,UAAU,GAAI,KACO,EAA1CM,OAAOR,EAAcE,UAAU,GAAI,MACnC,IACR,OAAQI,GACJ,IAAK,KACD,MAAO,IAEf,OAAOA,EASXZ,iBAAiBM,GACb,MAAMM,EAAaC,OAAO,IACoB,GAAxCC,OAAOR,EAAcE,UAAU,EAAG,IACQ,EAAxCM,OAAOR,EAAcE,UAAU,EAAG,IACM,EAAxCM,OAAOR,EAAcE,UAAU,EAAG,IACM,EAAxCM,OAAOR,EAAcE,UAAU,EAAG,IACM,EAAxCM,OAAOR,EAAcE,UAAU,EAAG,IACM,EAAxCM,OAAOR,EAAcE,UAAU,EAAG,IACM,EAAxCM,OAAOR,EAAcE,UAAU,EAAG,IACM,EAAxCM,OAAOR,EAAcE,UAAU,EAAG,IACM,EAAxCM,OAAOR,EAAcE,UAAU,EAAG,KAClC,IACR,OAAQI,GACJ,IAAK,KACD,MAAO,IACX,IAAK,KACD,MAAO,IAEf,OAAOA,GAGfzB,EAAQ,IAAI4B,QAAW3B,EAAU,IAAI2B,QAAW1B,EAAU,IAAI0B","file":"ISBN.esm.js","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _isbn, _isbn13, _isbn10;\n/**\n * ISBN\n *\n * @version 1.0.2\n */\nexport default class {\n    /**\n     * @param {string} isbn - チェックする ISBN の値\n     * @param {boolean} strict - 厳格モード（true ならハイフンなしの構文はエラーとする）\n     */\n    constructor(isbn, strict = false) {\n        _isbn.set(this, void 0);\n        _isbn13.set(this, false); // 現行規格（13桁）の ISBN か\n        _isbn10.set(this, false); // 旧規格（10桁）の ISBN か\n        __classPrivateFieldSet(this, _isbn, isbn);\n        const length = isbn.length;\n        if (length === 17 && /^(978|979)-\\d{1,5}-\\d{1,7}-\\d{1,7}-\\d$/.test(isbn)) {\n            __classPrivateFieldSet(this, _isbn13, true);\n        }\n        else if (/^\\d{13}$/.test(isbn)) {\n            __classPrivateFieldSet(this, _isbn13, !strict);\n        }\n        else if (length === 13 && /^\\d{1,5}-\\d{1,7}-\\d{1,7}-[\\dX]$/.test(isbn)) {\n            __classPrivateFieldSet(this, _isbn10, true);\n        }\n        else if (/^\\d{9}[\\dX]$/.test(isbn)) {\n            __classPrivateFieldSet(this, _isbn10, !strict);\n        }\n    }\n    /**\n     * verifyCheckDigit() のエイリアス\n     *\n     * @returns {boolean} フォーマット、チェックデジットともに正しい場合は true\n     */\n    isValid() {\n        return this.verifyCheckDigit();\n    }\n    /**\n     * 13桁の ISBN か\n     *\n     * @returns {boolean} 現行規格（13桁）の ISBN なら true\n     */\n    isIsbn13() {\n        return __classPrivateFieldGet(this, _isbn13);\n    }\n    /**\n     * 10桁の ISBN か\n     *\n     * @returns {boolean} 旧規格（10桁）の ISBN なら true\n     */\n    isIsbn10() {\n        return __classPrivateFieldGet(this, _isbn10);\n    }\n    /**\n     * フォーマットを検証（チェックデジットの検証はしない）\n     *\n     * @returns {boolean} フォーマットが正しい場合は true\n     */\n    verifyFormat() {\n        return __classPrivateFieldGet(this, _isbn13) || __classPrivateFieldGet(this, _isbn10);\n    }\n    /**\n     * チェックデジットも含めてフォーマットを検証（該当する出版物が存在するとは限らない）\n     *\n     * @returns {boolean} フォーマット、チェックデジットともに正しい場合は true\n     */\n    verifyCheckDigit() {\n        if (__classPrivateFieldGet(this, _isbn13)) {\n            /* ISBN-13 */\n            const isbnNoHyphens = this._getNoHyphens();\n            return isbnNoHyphens.substring(12) === this._getCheckDigit13(isbnNoHyphens);\n        }\n        else if (__classPrivateFieldGet(this, _isbn10)) {\n            /* ISBN-10 */\n            const isbnNoHyphens = this._getNoHyphens();\n            return isbnNoHyphens.substring(9) === this._getCheckDigit10(isbnNoHyphens);\n        }\n        return false;\n    }\n    /**\n     * ハイフンなしの ISBN を取得する\n     *\n     * @returns {string} ハイフンなしの ISBN\n     */\n    _getNoHyphens() {\n        return __classPrivateFieldGet(this, _isbn).replace(/-/g, '');\n    }\n    /**\n     * ISBN-13 のチェックデジットを取得する\n     *\n     * @param {string} isbnNoHyphens - ハイフンなしの ISBN\n     *\n     * @returns {string} チェックデジット\n     */\n    _getCheckDigit13(isbnNoHyphens) {\n        const checkDigit = String(10 -\n            ((Number(isbnNoHyphens.substring(0, 1)) +\n                Number(isbnNoHyphens.substring(1, 2)) * 3 +\n                Number(isbnNoHyphens.substring(2, 3)) +\n                Number(isbnNoHyphens.substring(3, 4)) * 3 +\n                Number(isbnNoHyphens.substring(4, 5)) +\n                Number(isbnNoHyphens.substring(5, 6)) * 3 +\n                Number(isbnNoHyphens.substring(6, 7)) +\n                Number(isbnNoHyphens.substring(7, 8)) * 3 +\n                Number(isbnNoHyphens.substring(8, 9)) +\n                Number(isbnNoHyphens.substring(9, 10)) * 3 +\n                Number(isbnNoHyphens.substring(10, 11)) +\n                Number(isbnNoHyphens.substring(11, 12)) * 3) %\n                10));\n        switch (checkDigit) {\n            case '10':\n                return '0';\n        }\n        return checkDigit;\n    }\n    /**\n     * ISBN-10 のチェックデジットを取得する\n     *\n     * @param {string} isbnNoHyphens - ハイフンなしの ISBN\n     *\n     * @returns {string} チェックデジット\n     */\n    _getCheckDigit10(isbnNoHyphens) {\n        const checkDigit = String(11 -\n            ((Number(isbnNoHyphens.substring(0, 1)) * 10 +\n                Number(isbnNoHyphens.substring(1, 2)) * 9 +\n                Number(isbnNoHyphens.substring(2, 3)) * 8 +\n                Number(isbnNoHyphens.substring(3, 4)) * 7 +\n                Number(isbnNoHyphens.substring(4, 5)) * 6 +\n                Number(isbnNoHyphens.substring(5, 6)) * 5 +\n                Number(isbnNoHyphens.substring(6, 7)) * 4 +\n                Number(isbnNoHyphens.substring(7, 8)) * 3 +\n                Number(isbnNoHyphens.substring(8, 9)) * 2) %\n                11));\n        switch (checkDigit) {\n            case '10':\n                return 'X';\n            case '11':\n                return '0';\n        }\n        return checkDigit;\n    }\n}\n_isbn = new WeakMap(), _isbn13 = new WeakMap(), _isbn10 = new WeakMap();\n"]}